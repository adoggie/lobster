// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lob.proto

#include "lob.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace lob {
PROTOBUF_CONSTEXPR LobPxRecord_LobPriceQty::LobPxRecord_LobPriceQty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lob_price_)*/0u
  , /*decltype(_impl_.lob_qty_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LobPxRecord_LobPriceQtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobPxRecord_LobPriceQtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobPxRecord_LobPriceQtyDefaultTypeInternal() {}
  union {
    LobPxRecord_LobPriceQty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobPxRecord_LobPriceQtyDefaultTypeInternal _LobPxRecord_LobPriceQty_default_instance_;
PROTOBUF_CONSTEXPR LobPxRecord_AsksBids::LobPxRecord_AsksBids(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asks_)*/{}
  , /*decltype(_impl_.bids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LobPxRecord_AsksBidsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobPxRecord_AsksBidsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobPxRecord_AsksBidsDefaultTypeInternal() {}
  union {
    LobPxRecord_AsksBids _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobPxRecord_AsksBidsDefaultTypeInternal _LobPxRecord_AsksBids_default_instance_;
PROTOBUF_CONSTEXPR LobPxRecord::LobPxRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asks_bids_)*/nullptr
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.symbol_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LobPxRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LobPxRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LobPxRecordDefaultTypeInternal() {}
  union {
    LobPxRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LobPxRecordDefaultTypeInternal _LobPxRecord_default_instance_;
}  // namespace lob
static ::_pb::Metadata file_level_metadata_lob_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_lob_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_lob_2eproto = nullptr;

const uint32_t TableStruct_lob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord_LobPriceQty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord_LobPriceQty, _impl_.lob_price_),
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord_LobPriceQty, _impl_.lob_qty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord_AsksBids, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord_AsksBids, _impl_.asks_),
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord_AsksBids, _impl_.bids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord, _impl_.symbol_id_),
  PROTOBUF_FIELD_OFFSET(::lob::LobPxRecord, _impl_.asks_bids_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::lob::LobPxRecord_LobPriceQty)},
  { 8, -1, -1, sizeof(::lob::LobPxRecord_AsksBids)},
  { 16, -1, -1, sizeof(::lob::LobPxRecord)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::lob::_LobPxRecord_LobPriceQty_default_instance_._instance,
  &::lob::_LobPxRecord_AsksBids_default_instance_._instance,
  &::lob::_LobPxRecord_default_instance_._instance,
};

const char descriptor_table_protodef_lob_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tlob.proto\022\003lob\"\250\002\n\013LobPxRecord\022\'\n\006sour"
  "ce\030\001 \001(\0162\027.lob.LobPxRecord.Source\022\021\n\tsym"
  "bol_id\030\002 \001(\r\022,\n\tasks_bids\030\003 \001(\0132\031.lob.Lo"
  "bPxRecord.AsksBids\0321\n\013LobPriceQty\022\021\n\tlob"
  "_price\030\001 \001(\r\022\017\n\007lob_qty\030\002 \001(\r\032b\n\010AsksBid"
  "s\022*\n\004asks\030\001 \003(\0132\034.lob.LobPxRecord.LobPri"
  "ceQty\022*\n\004bids\030\002 \003(\0132\034.lob.LobPxRecord.Lo"
  "bPriceQty\"\030\n\006Source\022\006\n\002SH\020\000\022\006\n\002SZ\020\001b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_lob_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lob_2eproto = {
    false, false, 323, descriptor_table_protodef_lob_2eproto,
    "lob.proto",
    &descriptor_table_lob_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_lob_2eproto::offsets,
    file_level_metadata_lob_2eproto, file_level_enum_descriptors_lob_2eproto,
    file_level_service_descriptors_lob_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lob_2eproto_getter() {
  return &descriptor_table_lob_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lob_2eproto(&descriptor_table_lob_2eproto);
namespace lob {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobPxRecord_Source_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lob_2eproto);
  return file_level_enum_descriptors_lob_2eproto[0];
}
bool LobPxRecord_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LobPxRecord_Source LobPxRecord::SH;
constexpr LobPxRecord_Source LobPxRecord::SZ;
constexpr LobPxRecord_Source LobPxRecord::Source_MIN;
constexpr LobPxRecord_Source LobPxRecord::Source_MAX;
constexpr int LobPxRecord::Source_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class LobPxRecord_LobPriceQty::_Internal {
 public:
};

LobPxRecord_LobPriceQty::LobPxRecord_LobPriceQty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lob.LobPxRecord.LobPriceQty)
}
LobPxRecord_LobPriceQty::LobPxRecord_LobPriceQty(const LobPxRecord_LobPriceQty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobPxRecord_LobPriceQty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lob_price_){}
    , decltype(_impl_.lob_qty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lob_price_, &from._impl_.lob_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lob_qty_) -
    reinterpret_cast<char*>(&_impl_.lob_price_)) + sizeof(_impl_.lob_qty_));
  // @@protoc_insertion_point(copy_constructor:lob.LobPxRecord.LobPriceQty)
}

inline void LobPxRecord_LobPriceQty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lob_price_){0u}
    , decltype(_impl_.lob_qty_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LobPxRecord_LobPriceQty::~LobPxRecord_LobPriceQty() {
  // @@protoc_insertion_point(destructor:lob.LobPxRecord.LobPriceQty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LobPxRecord_LobPriceQty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LobPxRecord_LobPriceQty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobPxRecord_LobPriceQty::Clear() {
// @@protoc_insertion_point(message_clear_start:lob.LobPxRecord.LobPriceQty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lob_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lob_qty_) -
      reinterpret_cast<char*>(&_impl_.lob_price_)) + sizeof(_impl_.lob_qty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobPxRecord_LobPriceQty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 lob_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lob_price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 lob_qty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lob_qty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobPxRecord_LobPriceQty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lob.LobPxRecord.LobPriceQty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lob_price = 1;
  if (this->_internal_lob_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lob_price(), target);
  }

  // uint32 lob_qty = 2;
  if (this->_internal_lob_qty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lob_qty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lob.LobPxRecord.LobPriceQty)
  return target;
}

size_t LobPxRecord_LobPriceQty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lob.LobPxRecord.LobPriceQty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lob_price = 1;
  if (this->_internal_lob_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lob_price());
  }

  // uint32 lob_qty = 2;
  if (this->_internal_lob_qty() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lob_qty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobPxRecord_LobPriceQty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobPxRecord_LobPriceQty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobPxRecord_LobPriceQty::GetClassData() const { return &_class_data_; }


void LobPxRecord_LobPriceQty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobPxRecord_LobPriceQty*>(&to_msg);
  auto& from = static_cast<const LobPxRecord_LobPriceQty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lob.LobPxRecord.LobPriceQty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lob_price() != 0) {
    _this->_internal_set_lob_price(from._internal_lob_price());
  }
  if (from._internal_lob_qty() != 0) {
    _this->_internal_set_lob_qty(from._internal_lob_qty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobPxRecord_LobPriceQty::CopyFrom(const LobPxRecord_LobPriceQty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lob.LobPxRecord.LobPriceQty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobPxRecord_LobPriceQty::IsInitialized() const {
  return true;
}

void LobPxRecord_LobPriceQty::InternalSwap(LobPxRecord_LobPriceQty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobPxRecord_LobPriceQty, _impl_.lob_qty_)
      + sizeof(LobPxRecord_LobPriceQty::_impl_.lob_qty_)
      - PROTOBUF_FIELD_OFFSET(LobPxRecord_LobPriceQty, _impl_.lob_price_)>(
          reinterpret_cast<char*>(&_impl_.lob_price_),
          reinterpret_cast<char*>(&other->_impl_.lob_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobPxRecord_LobPriceQty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lob_2eproto_getter, &descriptor_table_lob_2eproto_once,
      file_level_metadata_lob_2eproto[0]);
}

// ===================================================================

class LobPxRecord_AsksBids::_Internal {
 public:
};

LobPxRecord_AsksBids::LobPxRecord_AsksBids(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lob.LobPxRecord.AsksBids)
}
LobPxRecord_AsksBids::LobPxRecord_AsksBids(const LobPxRecord_AsksBids& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobPxRecord_AsksBids* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_){from._impl_.asks_}
    , decltype(_impl_.bids_){from._impl_.bids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lob.LobPxRecord.AsksBids)
}

inline void LobPxRecord_AsksBids::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_){arena}
    , decltype(_impl_.bids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LobPxRecord_AsksBids::~LobPxRecord_AsksBids() {
  // @@protoc_insertion_point(destructor:lob.LobPxRecord.AsksBids)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LobPxRecord_AsksBids::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asks_.~RepeatedPtrField();
  _impl_.bids_.~RepeatedPtrField();
}

void LobPxRecord_AsksBids::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobPxRecord_AsksBids::Clear() {
// @@protoc_insertion_point(message_clear_start:lob.LobPxRecord.AsksBids)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asks_.Clear();
  _impl_.bids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobPxRecord_AsksBids::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .lob.LobPxRecord.LobPriceQty asks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .lob.LobPxRecord.LobPriceQty bids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobPxRecord_AsksBids::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lob.LobPxRecord.AsksBids)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lob.LobPxRecord.LobPriceQty asks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asks_size()); i < n; i++) {
    const auto& repfield = this->_internal_asks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .lob.LobPxRecord.LobPriceQty bids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lob.LobPxRecord.AsksBids)
  return target;
}

size_t LobPxRecord_AsksBids::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lob.LobPxRecord.AsksBids)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lob.LobPxRecord.LobPriceQty asks = 1;
  total_size += 1UL * this->_internal_asks_size();
  for (const auto& msg : this->_impl_.asks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lob.LobPxRecord.LobPriceQty bids = 2;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_impl_.bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobPxRecord_AsksBids::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobPxRecord_AsksBids::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobPxRecord_AsksBids::GetClassData() const { return &_class_data_; }


void LobPxRecord_AsksBids::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobPxRecord_AsksBids*>(&to_msg);
  auto& from = static_cast<const LobPxRecord_AsksBids&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lob.LobPxRecord.AsksBids)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asks_.MergeFrom(from._impl_.asks_);
  _this->_impl_.bids_.MergeFrom(from._impl_.bids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobPxRecord_AsksBids::CopyFrom(const LobPxRecord_AsksBids& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lob.LobPxRecord.AsksBids)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobPxRecord_AsksBids::IsInitialized() const {
  return true;
}

void LobPxRecord_AsksBids::InternalSwap(LobPxRecord_AsksBids* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LobPxRecord_AsksBids::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lob_2eproto_getter, &descriptor_table_lob_2eproto_once,
      file_level_metadata_lob_2eproto[1]);
}

// ===================================================================

class LobPxRecord::_Internal {
 public:
  static const ::lob::LobPxRecord_AsksBids& asks_bids(const LobPxRecord* msg);
};

const ::lob::LobPxRecord_AsksBids&
LobPxRecord::_Internal::asks_bids(const LobPxRecord* msg) {
  return *msg->_impl_.asks_bids_;
}
LobPxRecord::LobPxRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lob.LobPxRecord)
}
LobPxRecord::LobPxRecord(const LobPxRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LobPxRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_bids_){nullptr}
    , decltype(_impl_.source_){}
    , decltype(_impl_.symbol_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_asks_bids()) {
    _this->_impl_.asks_bids_ = new ::lob::LobPxRecord_AsksBids(*from._impl_.asks_bids_);
  }
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.symbol_id_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.symbol_id_));
  // @@protoc_insertion_point(copy_constructor:lob.LobPxRecord)
}

inline void LobPxRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asks_bids_){nullptr}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.symbol_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LobPxRecord::~LobPxRecord() {
  // @@protoc_insertion_point(destructor:lob.LobPxRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LobPxRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.asks_bids_;
}

void LobPxRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LobPxRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:lob.LobPxRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.asks_bids_ != nullptr) {
    delete _impl_.asks_bids_;
  }
  _impl_.asks_bids_ = nullptr;
  ::memset(&_impl_.source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.symbol_id_) -
      reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.symbol_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LobPxRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .lob.LobPxRecord.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::lob::LobPxRecord_Source>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 symbol_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.symbol_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .lob.LobPxRecord.AsksBids asks_bids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_asks_bids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LobPxRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lob.LobPxRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .lob.LobPxRecord.Source source = 1;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source(), target);
  }

  // uint32 symbol_id = 2;
  if (this->_internal_symbol_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_symbol_id(), target);
  }

  // .lob.LobPxRecord.AsksBids asks_bids = 3;
  if (this->_internal_has_asks_bids()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::asks_bids(this),
        _Internal::asks_bids(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lob.LobPxRecord)
  return target;
}

size_t LobPxRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lob.LobPxRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lob.LobPxRecord.AsksBids asks_bids = 3;
  if (this->_internal_has_asks_bids()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.asks_bids_);
  }

  // .lob.LobPxRecord.Source source = 1;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // uint32 symbol_id = 2;
  if (this->_internal_symbol_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_symbol_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LobPxRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LobPxRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LobPxRecord::GetClassData() const { return &_class_data_; }


void LobPxRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LobPxRecord*>(&to_msg);
  auto& from = static_cast<const LobPxRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lob.LobPxRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_asks_bids()) {
    _this->_internal_mutable_asks_bids()->::lob::LobPxRecord_AsksBids::MergeFrom(
        from._internal_asks_bids());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_symbol_id() != 0) {
    _this->_internal_set_symbol_id(from._internal_symbol_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LobPxRecord::CopyFrom(const LobPxRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lob.LobPxRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobPxRecord::IsInitialized() const {
  return true;
}

void LobPxRecord::InternalSwap(LobPxRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LobPxRecord, _impl_.symbol_id_)
      + sizeof(LobPxRecord::_impl_.symbol_id_)
      - PROTOBUF_FIELD_OFFSET(LobPxRecord, _impl_.asks_bids_)>(
          reinterpret_cast<char*>(&_impl_.asks_bids_),
          reinterpret_cast<char*>(&other->_impl_.asks_bids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LobPxRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lob_2eproto_getter, &descriptor_table_lob_2eproto_once,
      file_level_metadata_lob_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lob
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lob::LobPxRecord_LobPriceQty*
Arena::CreateMaybeMessage< ::lob::LobPxRecord_LobPriceQty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lob::LobPxRecord_LobPriceQty >(arena);
}
template<> PROTOBUF_NOINLINE ::lob::LobPxRecord_AsksBids*
Arena::CreateMaybeMessage< ::lob::LobPxRecord_AsksBids >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lob::LobPxRecord_AsksBids >(arena);
}
template<> PROTOBUF_NOINLINE ::lob::LobPxRecord*
Arena::CreateMaybeMessage< ::lob::LobPxRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lob::LobPxRecord >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
