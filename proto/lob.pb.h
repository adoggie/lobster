// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lob.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lob_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lob_2eproto;
namespace lob {
class LobPxRecord;
struct LobPxRecordDefaultTypeInternal;
extern LobPxRecordDefaultTypeInternal _LobPxRecord_default_instance_;
class LobPxRecord_AsksBids;
struct LobPxRecord_AsksBidsDefaultTypeInternal;
extern LobPxRecord_AsksBidsDefaultTypeInternal _LobPxRecord_AsksBids_default_instance_;
class LobPxRecord_LobPriceQty;
struct LobPxRecord_LobPriceQtyDefaultTypeInternal;
extern LobPxRecord_LobPriceQtyDefaultTypeInternal _LobPxRecord_LobPriceQty_default_instance_;
}  // namespace lob
PROTOBUF_NAMESPACE_OPEN
template<> ::lob::LobPxRecord* Arena::CreateMaybeMessage<::lob::LobPxRecord>(Arena*);
template<> ::lob::LobPxRecord_AsksBids* Arena::CreateMaybeMessage<::lob::LobPxRecord_AsksBids>(Arena*);
template<> ::lob::LobPxRecord_LobPriceQty* Arena::CreateMaybeMessage<::lob::LobPxRecord_LobPriceQty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lob {

enum LobPxRecord_Source : int {
  LobPxRecord_Source_SH = 0,
  LobPxRecord_Source_SZ = 1,
  LobPxRecord_Source_LobPxRecord_Source_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LobPxRecord_Source_LobPxRecord_Source_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LobPxRecord_Source_IsValid(int value);
constexpr LobPxRecord_Source LobPxRecord_Source_Source_MIN = LobPxRecord_Source_SH;
constexpr LobPxRecord_Source LobPxRecord_Source_Source_MAX = LobPxRecord_Source_SZ;
constexpr int LobPxRecord_Source_Source_ARRAYSIZE = LobPxRecord_Source_Source_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobPxRecord_Source_descriptor();
template<typename T>
inline const std::string& LobPxRecord_Source_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LobPxRecord_Source>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LobPxRecord_Source_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LobPxRecord_Source_descriptor(), enum_t_value);
}
inline bool LobPxRecord_Source_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LobPxRecord_Source* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LobPxRecord_Source>(
    LobPxRecord_Source_descriptor(), name, value);
}
// ===================================================================

class LobPxRecord_LobPriceQty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lob.LobPxRecord.LobPriceQty) */ {
 public:
  inline LobPxRecord_LobPriceQty() : LobPxRecord_LobPriceQty(nullptr) {}
  ~LobPxRecord_LobPriceQty() override;
  explicit PROTOBUF_CONSTEXPR LobPxRecord_LobPriceQty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobPxRecord_LobPriceQty(const LobPxRecord_LobPriceQty& from);
  LobPxRecord_LobPriceQty(LobPxRecord_LobPriceQty&& from) noexcept
    : LobPxRecord_LobPriceQty() {
    *this = ::std::move(from);
  }

  inline LobPxRecord_LobPriceQty& operator=(const LobPxRecord_LobPriceQty& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobPxRecord_LobPriceQty& operator=(LobPxRecord_LobPriceQty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobPxRecord_LobPriceQty& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobPxRecord_LobPriceQty* internal_default_instance() {
    return reinterpret_cast<const LobPxRecord_LobPriceQty*>(
               &_LobPxRecord_LobPriceQty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LobPxRecord_LobPriceQty& a, LobPxRecord_LobPriceQty& b) {
    a.Swap(&b);
  }
  inline void Swap(LobPxRecord_LobPriceQty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobPxRecord_LobPriceQty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobPxRecord_LobPriceQty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobPxRecord_LobPriceQty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobPxRecord_LobPriceQty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LobPxRecord_LobPriceQty& from) {
    LobPxRecord_LobPriceQty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobPxRecord_LobPriceQty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lob.LobPxRecord.LobPriceQty";
  }
  protected:
  explicit LobPxRecord_LobPriceQty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobPriceFieldNumber = 1,
    kLobQtyFieldNumber = 2,
  };
  // uint32 lob_price = 1;
  void clear_lob_price();
  uint32_t lob_price() const;
  void set_lob_price(uint32_t value);
  private:
  uint32_t _internal_lob_price() const;
  void _internal_set_lob_price(uint32_t value);
  public:

  // uint32 lob_qty = 2;
  void clear_lob_qty();
  uint32_t lob_qty() const;
  void set_lob_qty(uint32_t value);
  private:
  uint32_t _internal_lob_qty() const;
  void _internal_set_lob_qty(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lob.LobPxRecord.LobPriceQty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t lob_price_;
    uint32_t lob_qty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lob_2eproto;
};
// -------------------------------------------------------------------

class LobPxRecord_AsksBids final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lob.LobPxRecord.AsksBids) */ {
 public:
  inline LobPxRecord_AsksBids() : LobPxRecord_AsksBids(nullptr) {}
  ~LobPxRecord_AsksBids() override;
  explicit PROTOBUF_CONSTEXPR LobPxRecord_AsksBids(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobPxRecord_AsksBids(const LobPxRecord_AsksBids& from);
  LobPxRecord_AsksBids(LobPxRecord_AsksBids&& from) noexcept
    : LobPxRecord_AsksBids() {
    *this = ::std::move(from);
  }

  inline LobPxRecord_AsksBids& operator=(const LobPxRecord_AsksBids& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobPxRecord_AsksBids& operator=(LobPxRecord_AsksBids&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobPxRecord_AsksBids& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobPxRecord_AsksBids* internal_default_instance() {
    return reinterpret_cast<const LobPxRecord_AsksBids*>(
               &_LobPxRecord_AsksBids_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LobPxRecord_AsksBids& a, LobPxRecord_AsksBids& b) {
    a.Swap(&b);
  }
  inline void Swap(LobPxRecord_AsksBids* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobPxRecord_AsksBids* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobPxRecord_AsksBids* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobPxRecord_AsksBids>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobPxRecord_AsksBids& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LobPxRecord_AsksBids& from) {
    LobPxRecord_AsksBids::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobPxRecord_AsksBids* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lob.LobPxRecord.AsksBids";
  }
  protected:
  explicit LobPxRecord_AsksBids(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsksFieldNumber = 1,
    kBidsFieldNumber = 2,
  };
  // repeated .lob.LobPxRecord.LobPriceQty asks = 1;
  int asks_size() const;
  private:
  int _internal_asks_size() const;
  public:
  void clear_asks();
  ::lob::LobPxRecord_LobPriceQty* mutable_asks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >*
      mutable_asks();
  private:
  const ::lob::LobPxRecord_LobPriceQty& _internal_asks(int index) const;
  ::lob::LobPxRecord_LobPriceQty* _internal_add_asks();
  public:
  const ::lob::LobPxRecord_LobPriceQty& asks(int index) const;
  ::lob::LobPxRecord_LobPriceQty* add_asks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >&
      asks() const;

  // repeated .lob.LobPxRecord.LobPriceQty bids = 2;
  int bids_size() const;
  private:
  int _internal_bids_size() const;
  public:
  void clear_bids();
  ::lob::LobPxRecord_LobPriceQty* mutable_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >*
      mutable_bids();
  private:
  const ::lob::LobPxRecord_LobPriceQty& _internal_bids(int index) const;
  ::lob::LobPxRecord_LobPriceQty* _internal_add_bids();
  public:
  const ::lob::LobPxRecord_LobPriceQty& bids(int index) const;
  ::lob::LobPxRecord_LobPriceQty* add_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >&
      bids() const;

  // @@protoc_insertion_point(class_scope:lob.LobPxRecord.AsksBids)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty > asks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty > bids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lob_2eproto;
};
// -------------------------------------------------------------------

class LobPxRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lob.LobPxRecord) */ {
 public:
  inline LobPxRecord() : LobPxRecord(nullptr) {}
  ~LobPxRecord() override;
  explicit PROTOBUF_CONSTEXPR LobPxRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LobPxRecord(const LobPxRecord& from);
  LobPxRecord(LobPxRecord&& from) noexcept
    : LobPxRecord() {
    *this = ::std::move(from);
  }

  inline LobPxRecord& operator=(const LobPxRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LobPxRecord& operator=(LobPxRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LobPxRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const LobPxRecord* internal_default_instance() {
    return reinterpret_cast<const LobPxRecord*>(
               &_LobPxRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LobPxRecord& a, LobPxRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LobPxRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LobPxRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LobPxRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LobPxRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LobPxRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LobPxRecord& from) {
    LobPxRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LobPxRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lob.LobPxRecord";
  }
  protected:
  explicit LobPxRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LobPxRecord_LobPriceQty LobPriceQty;
  typedef LobPxRecord_AsksBids AsksBids;

  typedef LobPxRecord_Source Source;
  static constexpr Source SH =
    LobPxRecord_Source_SH;
  static constexpr Source SZ =
    LobPxRecord_Source_SZ;
  static inline bool Source_IsValid(int value) {
    return LobPxRecord_Source_IsValid(value);
  }
  static constexpr Source Source_MIN =
    LobPxRecord_Source_Source_MIN;
  static constexpr Source Source_MAX =
    LobPxRecord_Source_Source_MAX;
  static constexpr int Source_ARRAYSIZE =
    LobPxRecord_Source_Source_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Source_descriptor() {
    return LobPxRecord_Source_descriptor();
  }
  template<typename T>
  static inline const std::string& Source_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Source>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Source_Name.");
    return LobPxRecord_Source_Name(enum_t_value);
  }
  static inline bool Source_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Source* value) {
    return LobPxRecord_Source_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAsksBidsFieldNumber = 3,
    kSourceFieldNumber = 1,
    kSymbolIdFieldNumber = 2,
  };
  // .lob.LobPxRecord.AsksBids asks_bids = 3;
  bool has_asks_bids() const;
  private:
  bool _internal_has_asks_bids() const;
  public:
  void clear_asks_bids();
  const ::lob::LobPxRecord_AsksBids& asks_bids() const;
  PROTOBUF_NODISCARD ::lob::LobPxRecord_AsksBids* release_asks_bids();
  ::lob::LobPxRecord_AsksBids* mutable_asks_bids();
  void set_allocated_asks_bids(::lob::LobPxRecord_AsksBids* asks_bids);
  private:
  const ::lob::LobPxRecord_AsksBids& _internal_asks_bids() const;
  ::lob::LobPxRecord_AsksBids* _internal_mutable_asks_bids();
  public:
  void unsafe_arena_set_allocated_asks_bids(
      ::lob::LobPxRecord_AsksBids* asks_bids);
  ::lob::LobPxRecord_AsksBids* unsafe_arena_release_asks_bids();

  // .lob.LobPxRecord.Source source = 1;
  void clear_source();
  ::lob::LobPxRecord_Source source() const;
  void set_source(::lob::LobPxRecord_Source value);
  private:
  ::lob::LobPxRecord_Source _internal_source() const;
  void _internal_set_source(::lob::LobPxRecord_Source value);
  public:

  // uint32 symbol_id = 2;
  void clear_symbol_id();
  uint32_t symbol_id() const;
  void set_symbol_id(uint32_t value);
  private:
  uint32_t _internal_symbol_id() const;
  void _internal_set_symbol_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lob.LobPxRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::lob::LobPxRecord_AsksBids* asks_bids_;
    int source_;
    uint32_t symbol_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LobPxRecord_LobPriceQty

// uint32 lob_price = 1;
inline void LobPxRecord_LobPriceQty::clear_lob_price() {
  _impl_.lob_price_ = 0u;
}
inline uint32_t LobPxRecord_LobPriceQty::_internal_lob_price() const {
  return _impl_.lob_price_;
}
inline uint32_t LobPxRecord_LobPriceQty::lob_price() const {
  // @@protoc_insertion_point(field_get:lob.LobPxRecord.LobPriceQty.lob_price)
  return _internal_lob_price();
}
inline void LobPxRecord_LobPriceQty::_internal_set_lob_price(uint32_t value) {
  
  _impl_.lob_price_ = value;
}
inline void LobPxRecord_LobPriceQty::set_lob_price(uint32_t value) {
  _internal_set_lob_price(value);
  // @@protoc_insertion_point(field_set:lob.LobPxRecord.LobPriceQty.lob_price)
}

// uint32 lob_qty = 2;
inline void LobPxRecord_LobPriceQty::clear_lob_qty() {
  _impl_.lob_qty_ = 0u;
}
inline uint32_t LobPxRecord_LobPriceQty::_internal_lob_qty() const {
  return _impl_.lob_qty_;
}
inline uint32_t LobPxRecord_LobPriceQty::lob_qty() const {
  // @@protoc_insertion_point(field_get:lob.LobPxRecord.LobPriceQty.lob_qty)
  return _internal_lob_qty();
}
inline void LobPxRecord_LobPriceQty::_internal_set_lob_qty(uint32_t value) {
  
  _impl_.lob_qty_ = value;
}
inline void LobPxRecord_LobPriceQty::set_lob_qty(uint32_t value) {
  _internal_set_lob_qty(value);
  // @@protoc_insertion_point(field_set:lob.LobPxRecord.LobPriceQty.lob_qty)
}

// -------------------------------------------------------------------

// LobPxRecord_AsksBids

// repeated .lob.LobPxRecord.LobPriceQty asks = 1;
inline int LobPxRecord_AsksBids::_internal_asks_size() const {
  return _impl_.asks_.size();
}
inline int LobPxRecord_AsksBids::asks_size() const {
  return _internal_asks_size();
}
inline void LobPxRecord_AsksBids::clear_asks() {
  _impl_.asks_.Clear();
}
inline ::lob::LobPxRecord_LobPriceQty* LobPxRecord_AsksBids::mutable_asks(int index) {
  // @@protoc_insertion_point(field_mutable:lob.LobPxRecord.AsksBids.asks)
  return _impl_.asks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >*
LobPxRecord_AsksBids::mutable_asks() {
  // @@protoc_insertion_point(field_mutable_list:lob.LobPxRecord.AsksBids.asks)
  return &_impl_.asks_;
}
inline const ::lob::LobPxRecord_LobPriceQty& LobPxRecord_AsksBids::_internal_asks(int index) const {
  return _impl_.asks_.Get(index);
}
inline const ::lob::LobPxRecord_LobPriceQty& LobPxRecord_AsksBids::asks(int index) const {
  // @@protoc_insertion_point(field_get:lob.LobPxRecord.AsksBids.asks)
  return _internal_asks(index);
}
inline ::lob::LobPxRecord_LobPriceQty* LobPxRecord_AsksBids::_internal_add_asks() {
  return _impl_.asks_.Add();
}
inline ::lob::LobPxRecord_LobPriceQty* LobPxRecord_AsksBids::add_asks() {
  ::lob::LobPxRecord_LobPriceQty* _add = _internal_add_asks();
  // @@protoc_insertion_point(field_add:lob.LobPxRecord.AsksBids.asks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >&
LobPxRecord_AsksBids::asks() const {
  // @@protoc_insertion_point(field_list:lob.LobPxRecord.AsksBids.asks)
  return _impl_.asks_;
}

// repeated .lob.LobPxRecord.LobPriceQty bids = 2;
inline int LobPxRecord_AsksBids::_internal_bids_size() const {
  return _impl_.bids_.size();
}
inline int LobPxRecord_AsksBids::bids_size() const {
  return _internal_bids_size();
}
inline void LobPxRecord_AsksBids::clear_bids() {
  _impl_.bids_.Clear();
}
inline ::lob::LobPxRecord_LobPriceQty* LobPxRecord_AsksBids::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:lob.LobPxRecord.AsksBids.bids)
  return _impl_.bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >*
LobPxRecord_AsksBids::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:lob.LobPxRecord.AsksBids.bids)
  return &_impl_.bids_;
}
inline const ::lob::LobPxRecord_LobPriceQty& LobPxRecord_AsksBids::_internal_bids(int index) const {
  return _impl_.bids_.Get(index);
}
inline const ::lob::LobPxRecord_LobPriceQty& LobPxRecord_AsksBids::bids(int index) const {
  // @@protoc_insertion_point(field_get:lob.LobPxRecord.AsksBids.bids)
  return _internal_bids(index);
}
inline ::lob::LobPxRecord_LobPriceQty* LobPxRecord_AsksBids::_internal_add_bids() {
  return _impl_.bids_.Add();
}
inline ::lob::LobPxRecord_LobPriceQty* LobPxRecord_AsksBids::add_bids() {
  ::lob::LobPxRecord_LobPriceQty* _add = _internal_add_bids();
  // @@protoc_insertion_point(field_add:lob.LobPxRecord.AsksBids.bids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lob::LobPxRecord_LobPriceQty >&
LobPxRecord_AsksBids::bids() const {
  // @@protoc_insertion_point(field_list:lob.LobPxRecord.AsksBids.bids)
  return _impl_.bids_;
}

// -------------------------------------------------------------------

// LobPxRecord

// .lob.LobPxRecord.Source source = 1;
inline void LobPxRecord::clear_source() {
  _impl_.source_ = 0;
}
inline ::lob::LobPxRecord_Source LobPxRecord::_internal_source() const {
  return static_cast< ::lob::LobPxRecord_Source >(_impl_.source_);
}
inline ::lob::LobPxRecord_Source LobPxRecord::source() const {
  // @@protoc_insertion_point(field_get:lob.LobPxRecord.source)
  return _internal_source();
}
inline void LobPxRecord::_internal_set_source(::lob::LobPxRecord_Source value) {
  
  _impl_.source_ = value;
}
inline void LobPxRecord::set_source(::lob::LobPxRecord_Source value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:lob.LobPxRecord.source)
}

// uint32 symbol_id = 2;
inline void LobPxRecord::clear_symbol_id() {
  _impl_.symbol_id_ = 0u;
}
inline uint32_t LobPxRecord::_internal_symbol_id() const {
  return _impl_.symbol_id_;
}
inline uint32_t LobPxRecord::symbol_id() const {
  // @@protoc_insertion_point(field_get:lob.LobPxRecord.symbol_id)
  return _internal_symbol_id();
}
inline void LobPxRecord::_internal_set_symbol_id(uint32_t value) {
  
  _impl_.symbol_id_ = value;
}
inline void LobPxRecord::set_symbol_id(uint32_t value) {
  _internal_set_symbol_id(value);
  // @@protoc_insertion_point(field_set:lob.LobPxRecord.symbol_id)
}

// .lob.LobPxRecord.AsksBids asks_bids = 3;
inline bool LobPxRecord::_internal_has_asks_bids() const {
  return this != internal_default_instance() && _impl_.asks_bids_ != nullptr;
}
inline bool LobPxRecord::has_asks_bids() const {
  return _internal_has_asks_bids();
}
inline void LobPxRecord::clear_asks_bids() {
  if (GetArenaForAllocation() == nullptr && _impl_.asks_bids_ != nullptr) {
    delete _impl_.asks_bids_;
  }
  _impl_.asks_bids_ = nullptr;
}
inline const ::lob::LobPxRecord_AsksBids& LobPxRecord::_internal_asks_bids() const {
  const ::lob::LobPxRecord_AsksBids* p = _impl_.asks_bids_;
  return p != nullptr ? *p : reinterpret_cast<const ::lob::LobPxRecord_AsksBids&>(
      ::lob::_LobPxRecord_AsksBids_default_instance_);
}
inline const ::lob::LobPxRecord_AsksBids& LobPxRecord::asks_bids() const {
  // @@protoc_insertion_point(field_get:lob.LobPxRecord.asks_bids)
  return _internal_asks_bids();
}
inline void LobPxRecord::unsafe_arena_set_allocated_asks_bids(
    ::lob::LobPxRecord_AsksBids* asks_bids) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.asks_bids_);
  }
  _impl_.asks_bids_ = asks_bids;
  if (asks_bids) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lob.LobPxRecord.asks_bids)
}
inline ::lob::LobPxRecord_AsksBids* LobPxRecord::release_asks_bids() {
  
  ::lob::LobPxRecord_AsksBids* temp = _impl_.asks_bids_;
  _impl_.asks_bids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::lob::LobPxRecord_AsksBids* LobPxRecord::unsafe_arena_release_asks_bids() {
  // @@protoc_insertion_point(field_release:lob.LobPxRecord.asks_bids)
  
  ::lob::LobPxRecord_AsksBids* temp = _impl_.asks_bids_;
  _impl_.asks_bids_ = nullptr;
  return temp;
}
inline ::lob::LobPxRecord_AsksBids* LobPxRecord::_internal_mutable_asks_bids() {
  
  if (_impl_.asks_bids_ == nullptr) {
    auto* p = CreateMaybeMessage<::lob::LobPxRecord_AsksBids>(GetArenaForAllocation());
    _impl_.asks_bids_ = p;
  }
  return _impl_.asks_bids_;
}
inline ::lob::LobPxRecord_AsksBids* LobPxRecord::mutable_asks_bids() {
  ::lob::LobPxRecord_AsksBids* _msg = _internal_mutable_asks_bids();
  // @@protoc_insertion_point(field_mutable:lob.LobPxRecord.asks_bids)
  return _msg;
}
inline void LobPxRecord::set_allocated_asks_bids(::lob::LobPxRecord_AsksBids* asks_bids) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.asks_bids_;
  }
  if (asks_bids) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(asks_bids);
    if (message_arena != submessage_arena) {
      asks_bids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asks_bids, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.asks_bids_ = asks_bids;
  // @@protoc_insertion_point(field_set_allocated:lob.LobPxRecord.asks_bids)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lob

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lob::LobPxRecord_Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lob::LobPxRecord_Source>() {
  return ::lob::LobPxRecord_Source_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lob_2eproto
